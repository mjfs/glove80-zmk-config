/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers
#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define CURSORS 3

/*ROW 01*/
#define k_F1	0
#define k_F2	1
#define k_F3	2
#define k_F4	3
#define k_F5	4
#define k_HOME	5
#define k_END	6
#define k_RBKT	7
#define k_PG_UP	8
#define k_PG_DN	9
	
	/*ROW 02*/
#define k_GRAVE	10
#define k_N1	11
#define k_N2	12
#define k_N3	13
#define k_N4	14
#define k_N5	15
#define k_N6	16
#define k_N7	17
#define k_N8	18
#define k_N9	19
#define k_N0	20
#define k_EQUAL	21
	
	/*ROW 03*/
#define k_ESC	22
#define k_Q	23
#define k_W	24
#define k_E	25
#define k_R	26
#define k_T	27
#define k_Z	28
#define k_U	29
#define k_I	30
#define k_O	31
#define k_P	32
#define k_LBKT	33
	
	/*ROW 04*/
#define k_TAB	34
#define k_A	35
#define k_S	36
#define k_D	37
#define k_F	38
#define k_G	39
#define k_H	40
#define k_J	41
#define k_K	42
#define k_L	43
#define k_SEMI	44
#define k_BSLH	45
	
	/*ROW 05*/
#define k_LGUI	46
#define k_Y	47
#define k_X	48
#define k_C	49
#define k_V	50
#define k_B	51
	
#define k_LSHIFT	52
#define k_LCTRL	53
#define k_LOWER	54

#define k_MAGIC	55
#define k_RCTRL	56
#define k_RSHIFT	57
	
#define k_N	58
#define k_M	59
#define k_COMMA	60
#define k_DOT	61
#define k_FSLH	62
#define k_MINUS	63
	
	/*ROW 06*/
#define k_F6	64
#define k_F7	65
#define k_F8	66
#define k_F9	67
#define k_F10	68
	
#define k_BSPC	69
#define k_RALT	70
#define k_DEL	71
	
#define k_LALT	72
#define k_RET	73
#define k_SPACE	74
	
#define k_LEFT	75
#define k_UP	76
#define k_DOWN	77
#define k_RIGHT	78
#define k_SQT	79

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LOWER>, <&to LOWER>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
	
	prog_caps: behavior_prog_caps_word {
		compatible	=	"zmk,behavior-caps-word";
		label	=	"PROG_CAPS";
		#binding-cells	=	<0>;
		continue-list	=	<BSPC DEL N1 N2 N3 N4 N5 N6 N7 N8 N9 N0 FSLH>;
	};

	td_ctlopt: tap_dance_2 {
		compatible	=	"zmk,behavior-tap-dance";
		label	=	"TAP_OPTION";
		#binding-cells	=	<0>;
		tapping-term-ms	=	<400>;
		bindings	=	<&kp RCTRL>, <&kp K_APP>;
	};

	td_lshift: tap_dance_3 {
		compatible	=	"zmk,behavior-tap-dance";
		label	=	"TAP_LOCK_LSHIFT";
		#binding-cells	=	<0>;
		tapping-term-ms	=	<400>;
		bindings	=	<&kp LSHIFT>, <&prog_caps>;
	};

	td_rshift: tap_dance_4 {
		compatible	=	"zmk,behavior-tap-dance";
		label	=	"TAP_LOCK_RSHIFT";
		#binding-cells	=	<0>;
		tapping-term-ms	=	<400>;
		bindings	=	<&kp RSHIFT>, <&prog_caps>;
	};

	mod_ra_R: mod_ralt_r {
		compatible	=	"zmk,behavior-mod-morph";
		label	=	"MOD_RALT_R_SHIFT_8";
		#binding-cells	=	<0>;
		bindings	=	<&kp R>, <&kp B>;
		mods	=	<(MOD_RALT)>;
		keep-mods	=	<(MOD_RALT)>;
	};

	mod_ra_T: mod_ralt_t {
		compatible	=	"zmk,behavior-mod-morph";
		label	=	"MOD_RALT_T_SHIFT_9";
		#binding-cells	=	<0>;
		bindings	=	<&kp T>, <&kp N>;
		mods	=	<(MOD_RALT)>;
		keep-mods	=	<(MOD_RALT)>;
	};

	mod_ra_S: mod_ralt_s_ralt_lt {
		compatible	=	"zmk,behavior-mod-morph";
		label	=	"MOD_RALT_S_RALT_LT";
		#binding-cells	=	<0>;
		bindings	=	<&kp S>, <&kp RA(COMMA)>;
		mods	=	<(MOD_RALT)>;
	};

	mod_ra_D: mod_ralt_d_ralt_gt {
		compatible	=	"zmk,behavior-mod-morph";
		label	=	"MOD_RALT_D_RALT_GT";
		#binding-cells	=	<0>;
		bindings	=	<&kp D>, <&kp RA(DOT)>;
		mods	=	<(MOD_RALT)>;
	};

	mod_ra_TAB: mod_lalt_tab {
		compatible	=	"zmk,behavior-mod-morph";
		label	=	"MOD_LALT_TAB";
		#binding-cells	=	<0>;
		bindings	=	<&kp TAB>, <&kp LA(TAB)>;
		mods	=	<(MOD_RALT)>;
	};

	mod_ra_SQT: mod_ralt_sqt_bckt {
		compatible	=	"zmk,behavior-mod-morph";
		label	=	"MOD_RALT_SQT_BCKT";
		#binding-cells	=	<0>;
		bindings	=	<&kp LS(N2)>, <&kp RA(N7)>;
		mods	=	<(MOD_RALT)>;
	};

	mod_ra_MINUS: mod_ralt_minus_BCKT {
		compatible	=	"zmk,behavior-mod-morph";
		label	=	"MOD_RALT_MINUS_BCKT";
		#binding-cells	=	<0>;
		bindings	=	<&kp MINUS>, <&kp GRAVE>;
		mods	=	<(MOD_RALT)>;
	};

	mod_ra_GRAVE: mod_ralt_grave_QUESTION {
		compatible	=	"zmk,behavior-mod-morph";
		label	=	"MOD_RALT_GRAVE_QUESTION";
		#binding-cells	=	<0>;
		bindings	=	<&kp LS(MINUS)>, <&kp RBKT>;
		mods	=	<(MOD_RALT)>;
	};

	mod_ra_RBKT: mod_ralt_rbkt_EXCLAIM {
		compatible	=	"zmk,behavior-mod-morph";
		label	=	"MOD_RALT_RBKT_EXCLAIM";
		#binding-cells	=	<0>;
		bindings	=	<&kp LS(N1)>, <&kp SQT>;
		mods	=	<(MOD_RALT)>;
	};
	
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    combos {
	compatible	=	"zmk,combos";

	combo_F11 {
		timeout-ms	=	<50>;
		key-positions	=	<k_F1 k_F2>;
		bindings	=	<&kp F11>;
	};

	combo_F12 {
		timeout-ms	=	<50>;
		key-positions	=	<k_F9 k_F10>;
		bindings	=	<&kp F12>;
	};



	combo_ESC {
		timeout-ms	=	<50>;
		key-positions	=	<k_MAGIC k_RALT>;
		bindings	=	<&kp ESC>;
	};

	combo_ESC2 {
		timeout-ms	=	<50>;
		key-positions	=	<k_LOWER k_DEL>;
		bindings	=	<&kp ESC>;
	};



	combo_SHIFT_HOME {
		timeout-ms	=	<50>;
		key-positions	=	<k_HOME k_END>;
		bindings	=	<&kp LS(HOME)>;
	};

	combo_SHIFT_END {
		timeout-ms	=	<50>;
		key-positions	=	<k_END k_RBKT>;
		bindings	=	<&kp LS(END)>;
	};



	combo_BSPC {
		timeout-ms	=	<50>;
		key-positions	=	<k_RET k_SPACE>;
		bindings	=	<&kp BSPC>;
	};



	combo_ALT_F4 {
		timeout-ms	=	<50>;
		key-positions	=	<k_F4 k_F5>;
		bindings	=	<&kp LA(F4)>;
	};
	
	combo_CTRL_BSPC {
		timeout-ms	=	<50>;
		key-positions	=	<k_BSPC k_LALT>;
		bindings	=	<&kp LC(BSPC)>;
	};

	combo_RET {
		timeout-ms	=	<50>;
		key-positions	=	<k_LALT k_LOWER>;
		bindings	=	<&kp RET>;
	};

	combo_K_APP {
		timeout-ms	=	<50>;
		key-positions	=	<k_MAGIC k_LCTRL>;
		bindings	=	<&kp K_APP>;
	};
	
    };
    
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            // &kp F1         &kp F2   &kp F3      &kp F4      &kp F5                                                                                         &kp F6  &kp F7      &kp F8      &kp F9      &kp F10
            // &kp EQUAL      &kp N1   &kp N2      &kp N3      &kp N4      &kp N5                                                                     &kp N6  &kp N7  &kp N8      &kp N9      &kp N0      &kp MINUS
            // &kp TAB        &kp Q    &kp W       &kp E       &kp R       &kp T                                                                      &kp Y   &kp U   &kp I       &kp O       &kp P       &kp BSLH
            // &kp ESC        &kp A    &kp S       &kp D       &kp F       &kp G                                                                      &kp H   &kp J   &kp K       &kp L       &kp SEMI    &kp SQT
            // &kp GRAVE      &kp Z    &kp X       &kp C       &kp V       &kp B   &kp LSHFT   &kp LCTRL   &layer_td  &kp LGUI  &kp RCTRL &kp RSHFT   &kp N   &kp M   &kp COMMA   &kp DOT     &kp FSLH    &kp PG_UP
            // &magic MAGIC 0 &kp HOME &kp END     &kp LEFT    &kp RIGHT           &kp BSPC    &kp DEL     &kp LALT   &kp RALT  &kp RET   &kp SPACE           &kp UP  &kp DOWN    &kp LBKT    &kp RBKT
	    
	    
            bindings = <
	    
	&kp F1	&kp F2	&kp F3	&kp F4	&kp F5									&kp HOME	&kp END	&kp PG_UP	&kp PG_DN	&mod_ra_RBKT
	&mod_ra_MINUS	&kp N1	&kp N2	&kp N3	&kp N4	&kp N5							&kp N6	&kp N7	&kp N8	&kp N9	&kp N0	&kp EQUAL
	&kp ESC	&kp Q	&kp W	&kp E	&mod_ra_R	&mod_ra_T							&kp Y	&kp U	&kp I	&kp O	&kp P	&kp LBKT
	&mod_ra_TAB	&kp A	&mod_ra_S	&mod_ra_D	&kp F	&kp G							&kp H	&kp J	&kp K	&kp L	&kp SEMI	&kp BSLH
	&kp LGUI	&kp Z	&kp X	&kp C	&kp V	&kp B	&td_lshift	&kp LCTRL	&layer_td	&magic MAGIC 0	&td_ctlopt	&td_rshift	&kp N	&kp M	&kp COMMA	&kp DOT	&kp FSLH	&mod_ra_GRAVE
	&kp F6	&kp F7	&kp F8	&kp F9	&kp F10		&kp BSPC	&kp LALT	&kp DEL	&kp RALT	&kp RET	&kp SPACE		&kp LEFT	&kp UP	&kp DOWN	&kp RIGHT	&mod_ra_SQT

            >;
        };

        lower_layer {
            bindings = <
	    
	&kp C_BRI_DN	&kp C_BRI_UP	&kp CAPS	&kp KP_NUM	&kp SCROLLLOCK									&kp C_VOL_DN	&kp C_VOL_UP	&kp C_PREV	&kp C_NEXT	&kp C_PP
	&kp ESC	&none	&kp LALT	&none	&none	&kp HOME							&kp C_MUTE	&kp KP_N7	&kp KP_N8	&kp KP_N9	&kp KP_N0	&kp F11
	&kp TAB	&none	&none	&kp UP_ARROW	&none	&kp END							&kp KP_SLASH	&kp KP_N7	&kp KP_N8	&kp KP_N9	&kp KP_MULTIPLY	&kp F12
	&kp INS	&none	&kp LEFT_ARROW	&kp DOWN_ARROW	&kp RIGHT_ARROW	&kp PG_UP							&kp RA(Q)	&kp KP_N4	&kp KP_N5	&kp KP_N6	&kp KP_PLUS	&kp GRAVE
	&kp LGUI	&none	&none	&none	&none	&kp PG_DN	&trans	&trans	&to DEFAULT	&trans	&trans	&trans	&kp RA(V)	&kp KP_N1	&kp KP_N2	&kp KP_N3	&kp KP_MINUS	&kp RBKT
	&trans	&kp K_APP	&kp PRINTSCREEN	&kp PAUSE_BREAK	&kp INS		&trans	&trans	&trans	&trans	&trans	&trans		&kp KP_N0	&kp DOT	&kp KP_DOT	&kp KP_ENTER	&kp PRINTSCREEN

            >;
        };

        magic_layer {
            bindings = <
	    
	&kp C_BRI_DN	&kp C_BRI_UP	&kp CAPS	&kp KP_NUM	&kp SCROLLLOCK									&kp C_VOL_DN	&kp C_VOL_UP	&kp C_PREV	&kp C_NEXT	&kp C_PP
	&kp ESC	&none	&none	&none	&none	&none							&kp C_MUTE	&none	&none	&none	&none	&kp F11
	&kp TAB	&rgb_ug RGB_SPI	&rgb_ug RGB_SAI	&rgb_ug RGB_HUI	&rgb_ug RGB_BRI	&rgb_ug RGB_TOG							&none	&none	&none	&none	&none	&kp F12
	&kp INS	&rgb_ug RGB_SPD	&rgb_ug RGB_SAD	&rgb_ug RGB_HUD	&rgb_ug RGB_BRD	&rgb_ug RGB_EFF							&none	&none	&none	&none	&none	&kp GRAVE
	&kp LGUI	&none	&none	&none	&none	&none	&bt_2	&bt_3	&trans	&trans	&trans	&sys_reset	&kp RG(PG_UP)	&kp RG(PG_DN)	&none	&none	&none	&none
	&bootloader	&kp K_APP	&kp PRINTSCREEN	&kp PAUSE_BREAK	&kp INS		&bt_0	&bt_1	&out OUT_USB	&to CURSORS	&bt BT_CLR	&bt BT_CLR_ALL		&kp RG(LEFT)	&kp RG(UP)	&kp RG(DOWN)	&kp RG(RIGHT)	&bootloader

	    
            >;
        };

        cursors_layer {
            bindings = <
	    
	&none	&none	&none	&none	&none									&none	&none	&none	&none	&none
	&none	&none	&none	&none	&none	&none							&none	&none	&none	&none	&none	&none
	&none	&kp Q	&kp W	&kp E	&kp R	&kp T							&none	&none	&kp UP_ARROW	&none	&kp P	&none
	&none	&kp A	&kp S	&kp D	&kp F	&kp G							&none	&kp LEFT_ARROW	&kp DOWN_ARROW	&kp RIGHT_ARROW	&none	&none
	&none	&none	&none	&none	&none	&none	&trans	&trans	&to DEFAULT	&trans	&trans	&trans	&none	&none	&none	&none	&none	&none
	&magic MAGIC 0	&none	&kp ESC	&none	&none		&kp SPACE	&trans	&trans	&trans	&trans	&trans		&none	&none	&none	&none	&none
	
            >;
        };
	
    };
};
